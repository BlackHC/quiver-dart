{"dependencies":[{"kind":"library","name":"dart:core","id":"dart.core","comment":"\n\nBuilt-in types, collections,\nand other core functionality for every Dart program.\n\nThis library is automatically imported.\n\nSome classes in this library,\nsuch as [String] and [num],\nsupport Dart's built-in data types.\nOther classes, such as [List] and [Map], provide data structures\nfor managing collections of objects.\nAnd still other classes represent commonly used types of data\nsuch as URIs, dates and times, and errors.\n\n## Numbers and booleans\n\n[int] and [double] provide support for Dart's built-in numerical data types:\nintegers and double-precision floating point numbers, respectively.\nAn object of type [bool] is either true or false.\nVariables of these types can be constructed from literals:\n\n    int meaningOfLife = 42;\n    double valueOfPi  = 3.141592;\n    bool visible      = true;\n\n## Strings and regular expressions\n\nA [String] is immutable and represents a sequence of characters.\n\n    String shakespeareQuote = \"All the world's a stage, ...\";\n\n[StringBuffer] provides a way to construct strings efficiently.\n\n    StringBuffer moreShakespeare = new StringBuffer();\n    moreShakespeare.write('And all the men and women ');\n    moreShakespeare.write('merely players; ...');\n\nThe String and StringBuffer classes implement string concatenation,\ninterpolation, and other string manipulation features.\n\n    String philosophy = 'Live on ';\n    String get palindrome => philosophy + philosophy.split('').reversed.join();\n\n[RegExp] implements Dart regular expressions,\nwhich provide a grammar for matching patterns within text.\nFor example, here's a regular expression that matches\na string of one or more digits:\n\n    var numbers = new RegExp(r'\\d+');\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n## Collections\n\nThe dart:core library provides basic collections,\nsuch as [List], [Map], and [Set].\n\nA List is an ordered collection of objects, with a length.\nLists are sometimes called arrays.\nUse a List when you need to access objects by index.\n\n    List superheroes = [ 'Batman', 'Superman', 'Harry Potter' ];\n\nA Set is an unordered collection of unique objects.\nYou cannot get an item by index (position).\nAdding a duplicate item has no effect.\n\n    Set villians = new Set();\n    villians.add('Joker');\n    villians.addAll( ['Lex Luther', 'Voldemort'] );\n\nA Map is an unordered collection of key-value pairs.\nMaps are sometimes called associative arrays because\nmaps associate a key to some value for easy retrieval.\nKeys are unique.\nUse a Map when you need to access objects\nby a unique identifier.\n\n    Map sidekicks = { 'Batman': 'Robin',\n                      'Superman': 'Lois Lane',\n                      'Harry Potter': 'Ron and Hermione' };\n\nIn addition to these classes,\ndart:core contains [Iterable],\nan interface that defines functionality\ncommon in collections of objects.\nExamples include the ability\nto run a function on each element in the collection,\nto apply a test to each element, \nto retrieve an object, and to determine length.\n\nIterable is implemented by List and Set,\nand used by Map for its keys and values.\n\nFor other kinds of collections, check out the\n[dart:collection](#dart-collection) library.\n\n## Date and time\n\nUse [DateTime] to represent a point in time\nand [Duration] to represent a span of time.\n\nYou can create DateTime objects with constructors\nor by parsing a correctly formatted string.\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20\");\n\nCreate a Duration object specifying the individual time units.\n\n    Duration timeRemaining = new Duration(hours:56, minutes:14);\n\nIn addition to DateTime and Duration,\ndart:core contains the [Stopwatch] class for measuring elapsed time.\n    \n## Uri\n\nA [Uri] object represents a uniform resource identifier,\nwhich identifies a resource on the web.\n\n    Uri dartlang = Uri.parse('http://dartlang.org/');\n    \n## Errors\n\nThe [Error] class represents the occurrence of an error\nduring runtime.\nSubclasses of this class represent specific kinds of errors.\n\n## Other documentation\n\nFor more information about how to use the built-in types, refer to\n[Built-in Types](http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html#built-in-types)\nin Chapter 2 of\n[Dart: Up and Running](http://www.dartlang.org/docs/dart-up-and-running/).\n\nAlso, see\n[dart:core - Numbers, Collections, Strings, and More](http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartcore---strings-collections-and-more)\nfor more coverage of classes in this package.\n\nThe \n[Dart Language Specification](https://www.dartlang.org/docs/spec/)\nprovides technical details.\n","children":[{"kind":"class","name":"Object","id":"Object","comment":"\nEverything in Dart is an [Object].\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nOverride this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:\n\n * Total: It must return a boolean for all arguments. It should never throw\n   or return `null`.\n\n * Reflexive: For all objects `o`, `o == o` must be true.\n\n * Symmetric: For all objects `o1` and `o2`, `o1 == o2` and `o2 == o1` must\n   either both be true, or both be false.\n\n * Transitive: For all objects `o1`, `o2`, and `o3`, if `o1 == o2` and\n   `o2 == o3` are true, then `o1 == o3` must be true.\n\nThe method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","children":[{"kind":"param","name":"other","id":"other"}],"line":"48"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a string representation of this object.\n","line":"67"},{"kind":"method","name":"noSuchMethod","id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","children":[{"ref":{"name":"Invocation","refId":"dart.core/Invocation"},"kind":"param","name":"invocation","id":"invocation"}],"line":"79"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"62"},{"ref":{"name":"Type","refId":"dart.core/Type"},"kind":"property","name":"runtimeType","id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","line":"84"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"18"}],"uri":"dart-sdk/lib/core/object.dart","line":"10"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Iterator","id":"Iterator","comment":"\nThe [Iterator] class provides methods to iterate over an object. It\nis transparently used by the for-in construct to test for the end\nof the iteration, and to get the elements.\n\nIf the object iterated over is changed during the iteration, the\nbehavior is unspecified.\n\nThe [Iterator] is initially positioned before the first element. Before\naccessing the first element the iterator must thus be advanced ([moveNext])\nto point to the first element. If there is no element left, then [moveNext]\nreturns false.\n\nA typical usage of an [Iterator] looks as follows:\n\n    var it = obj.iterator;\n    while (it.moveNext()) {\n      use(it.current);\n    }\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"moveNext","id":"moveNext0()","comment":"\nMoves to the next element. Returns true if [current] contains the next\nelement. Returns false, if no element was left.\n\nIt is safe to invoke [moveNext] even when the iterator is already\npositioned after the last element. In this case [moveNext] has no effect.\n","line":"35"},{"ref":{"name":"E","refId":"dart.core/Iterator/E"},"kind":"property","name":"current","id":"current","comment":"\nReturns the current element.\n\nReturn [:null:] if the iterator has not yet been moved to the first\nelement, or if the iterator has been moved after the last element of the\n[Iterable].\n","line":"44"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"dart-sdk/lib/core/iterator.dart","line":"27"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Iterable","id":"Iterable","comment":"\nAn object that uses an [Iterator] to serve objects one at a time.\n\nYou can iterate over all objects served by an Iterable object\nusing the for-in loop construct.\nFor example, you can iterate over all of the keys in a [Map],\nbecause Map keys are iterable.\n\n    Map kidsBooks = {'Matilda': 'Roald Dahl',\n                     'Green Eggs and Ham': 'Dr Seuss',\n                     'Where the Wild Things Are': 'Maurice Sendak'};\n    for (var book in kidsBooks.keys) {\n      print('$book was written by ${kidsBooks[book]}');\n    }\n\nThe [List] class and the [Set] class implement this interface,\nas do classes in the [dart:collection](#dart-collection) library.\n\nYou can implement Iterable in your own class.\nIf you do, then an instance of your Iterable class\ncan be the right-hand side of a for-in construct.\n","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"map","id":"map1()","comment":"\nReturns a lazy [Iterable] where each element [:e:] of `this` is replaced\nby the result of [:f(e):].\n\nThis method returns a view of the mapped elements. As long as the\nreturned [Iterable] is not iterated over, the supplied function [f] will\nnot be invoked. The transformed elements will not be cached. Iterating\nmultiple times over the the returned [Iterable] will invoke the supplied\nfunction [f] multiple times on the same element.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"61"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"61"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"where","id":"where1()","comment":"\nReturns a lazy [Iterable] with all elements that satisfy the\npredicate [test].\n\nThis method returns a view of the mapped elements. As long as the\nreturned [Iterable] is not iterated over, the supplied function [test] will\nnot be invoked. Iterating will not cache results, and thus iterating\nmultiple times over the returned [Iterable] will invoke the supplied\nfunction [test] multiple times on the same element.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"73"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"73"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"expand","id":"expand1()","comment":"\nExpands each element of this [Iterable] into zero or more elements.\n\nThe resulting Iterable runs through the elements returned\nby [f] for each element of this, in order.\n\nThe returned [Iterable] is lazy, and calls [f] for each element\nof this every time it's iterated.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"84"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"84"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"contains","id":"contains1()","comment":"\nReturns true if the collection contains an element equal to [element].\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"element","id":"element"}],"line":"89"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"forEach","id":"forEach1()","comment":"\nApplies the function [f] to each element of this collection.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"94"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"94"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"method","name":"reduce","id":"reduce1()","comment":"\nReduces a collection to a single value by iteratively combining elements\nof the collection using the provided function.\n\nExample of calculating the sum of an iterable:\n\n    iterable.reduce((value, element) => value + element);\n\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/core/iterable.dart","line":"105"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"105"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"105"},{"kind":"method","name":"fold","id":"fold2()","comment":"\nReduces a collection to a single value by iteratively combining each\nelement of the collection with an existing value using the provided\nfunction.\n\nUse [initialValue] as the initial value, and the function [combine] to\ncreate a new value from the previous one and an element.\n\nExample of calculating the sum of an iterable:\n\n    iterable.fold(0, (prev, element) => prev + element);\n\n","children":[{"kind":"param","name":"initialValue","id":"initialValue"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"previousValue","id":"previousValue","uri":"dart-sdk/lib/core/iterable.dart","line":"121"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"121"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"121"}],"line":"120"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"every","id":"every1()","comment":"\nReturns true if every elements of this collection satisify the\npredicate [test]. Returns `false` otherwise.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"127"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"127"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"join","id":"join1()","comment":"\nConverts each element to a [String] and concatenates the strings.\n\nConverts each element to a [String] by calling [Object.toString] on it.\nThen concatenates the strings, optionally separated by the [separator]\nstring.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"\"","isOptional":true,"kind":"param","name":"separator","id":"separator"}],"line":"136"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"any","id":"any1()","comment":"\nReturns true if one element of this collection satisfies the\npredicate [test]. Returns false otherwise.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"146"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"146"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"toList","id":"toList1()","comment":"\nCreates a [List] containing the elements of this [Iterable].\n\nThe elements are in iteration order. The list is fixed-length\nif [growable] is false.\n","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"isNamed":true,"kind":"param","name":"growable","id":"growable"}],"line":"154"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"toSet","id":"toSet0()","comment":"\nCreates a [Set] containing the elements of this [Iterable].\n","line":"159"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"take","id":"take1()","comment":"\nReturns an [Iterable] with at most [n] elements.\n\nThe returned [Iterable] may contain fewer than [n] elements, if `this`\ncontains fewer than [n] elements.\n\nIt is an error if [n] is negative.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"n","id":"n"}],"line":"187"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"takeWhile","id":"takeWhile1()","comment":"\nReturns an Iterable that stops once [test] is not satisfied anymore.\n\nThe filtering happens lazily. Every new Iterator of the returned\nIterable starts iterating over the elements of `this`.\n\nWhen the iterator encounters an element `e` that does not satisfy [test],\nit discards `e` and moves into the finished state. That is, it does not\nget or provide any more elements.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/core/iterable.dart","line":"199"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"199"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"skip","id":"skip1()","comment":"\nReturns an Iterable that skips the first [n] elements.\n\nIf `this` has fewer than [n] elements, then the resulting Iterable is \nempty.\n\nIt is an error if [n] is negative.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"n","id":"n"}],"line":"209"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"skipWhile","id":"skipWhile1()","comment":"\nReturns an Iterable that skips elements while [test] is satisfied.\n\nThe filtering happens lazily. Every new Iterator of the returned\nIterable iterates over all elements of `this`.\n\nAs long as the iterator's elements satisfy [test] they are\ndiscarded. Once an element does not satisfy the [test] the iterator stops\ntesting and uses every later element unconditionally. That is, the elements\nof the returned Iterable are the elements of `this` starting from the\nfirst element that does not satisfy [test].\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/core/iterable.dart","line":"223"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"223"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"method","name":"firstWhere","id":"firstWhere2()","comment":"\nReturns the first element that satisfies the given predicate [test].\n\nIf none matches, the result of invoking the [orElse] function is\nreturned. By default, when [orElse] is `null`, a [StateError] is\nthrown.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"254"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"254"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"method","name":"lastWhere","id":"lastWhere2()","comment":"\nReturns the last element that satisfies the given predicate [test].\n\nIf none matches, the result of invoking the [orElse] function is\nreturned. By default, when [orElse] is `null`, a [StateError] is\nthrown.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"263"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"263"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"method","name":"singleWhere","id":"singleWhere1()","comment":"\nReturns the single element that satisfies [test]. If no or more than one\nelement match then a [StateError] is thrown.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"269"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"269"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"method","name":"elementAt","id":"elementAt1()","comment":"\nReturns the [index]th element.\n\nIf `this` has fewer than [index] elements throws a [RangeError].\n\nNote: if `this` does not have a deterministic iteration order then the\nfunction may simply return any element without any iteration if there are\nat least [index] elements in `this`.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"280"},{"ref":{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"property","name":"iterator","id":"iterator","comment":"\nReturns an Iterator that iterates over this Iterable object.\n","line":"49"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","comment":"\nReturns the number of elements in [this].\n\nCounting all elements may be involve running through all elements and can\ntherefore be slow.\n","line":"167"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isEmpty","id":"isEmpty","comment":"\nReturns true if there is no element in this collection.\n","line":"172"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isNotEmpty","id":"isNotEmpty","comment":"\nReturns true if there is at least one element in this collection.\n","line":"177"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"property","name":"first","id":"first","comment":"\nReturns the first element.\n\nIf `this` is empty throws a [StateError]. Otherwise this method is\nequivalent to [:this.elementAt(0):]\n","line":"231"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"property","name":"last","id":"last","comment":"\nReturns the last element.\n\nIf `this` is empty throws a [StateError].\n","line":"238"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"property","name":"single","id":"single","comment":"\nReturns the single element in `this`.\n\nIf `this` is empty or has more than one element throws a [StateError].\n","line":"245"},{"kind":"constructor","name":"","id":"0()","line":"30"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"constructor","name":"generate","id":"generate2()","comment":"\nCreates an Iterable that generates its elements dynamically.\n\nThe Iterators created by the Iterable count from\nzero to [:count - 1:] while iterating, and call [generator]\nwith that index to create the next value.\n\nAs an Iterable, [:new Iterable.generate(n, generator)):] is equivalent to\n[:const [0, ..., n - 1].map(generator):]\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"count","id":"count"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"generator","id":"generator","children":[{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index","uri":"dart-sdk/lib/core/iterable.dart","line":"42"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"42"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"dart-sdk/lib/core/iterable.dart","line":"29"}],"uri":"dart-sdk/lib/core/core.dart","line":"153"},{"kind":"library","name":"dart:collection","id":"dart.collection","comment":"\nClasses and utilities that supplement the collection support in dart:core.\n","children":[{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableBase/E"}]}],"kind":"class","name":"IterableBase","id":"IterableBase","comment":"\nBase class for implementing [Iterable].\n\nThis class implements all methods of [Iterable] except [Iterable.iterator]\nin terms of `iterator`.\n","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"map","id":"map1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"204"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"204"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableBase/E"}]},"kind":"method","name":"where","id":"where1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"206"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"206"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"expand","id":"expand1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"208"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"208"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"contains","id":"contains1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"element","id":"element"}],"line":"211"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"forEach","id":"forEach1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"218"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"218"},{"returnType":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"method","name":"reduce","id":"reduce1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"returnType":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/collection/iterable.dart","line":"222"},{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"222"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"222"},{"kind":"method","name":"fold","id":"fold2()","children":[{"kind":"param","name":"initialValue","id":"initialValue"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"previousValue","id":"previousValue","uri":"dart-sdk/lib/collection/iterable.dart","line":"235"},{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"235"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"235"}],"line":"234"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"every","id":"every1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"241"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"241"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"join","id":"join1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"\"","isOptional":true,"kind":"param","name":"separator","id":"separator"}],"line":"248"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"any","id":"any1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"266"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"266"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.collection/IterableBase/E"}]},"kind":"method","name":"toList","id":"toList1()","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"isNamed":true,"kind":"param","name":"growable","id":"growable"}],"line":"273"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.collection/IterableBase/E"}]},"kind":"method","name":"toSet","id":"toSet0()","line":"276"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableBase/E"}]},"kind":"method","name":"take","id":"take1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"n","id":"n"}],"line":"291"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableBase/E"}]},"kind":"method","name":"takeWhile","id":"takeWhile1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/collection/iterable.dart","line":"295"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"295"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableBase/E"}]},"kind":"method","name":"skip","id":"skip1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"n","id":"n"}],"line":"299"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableBase/E"}]},"kind":"method","name":"skipWhile","id":"skipWhile1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/collection/iterable.dart","line":"303"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"303"},{"kind":"method","name":"firstWhere","id":"firstWhere2()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/collection/iterable.dart","line":"335"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"Object","refId":"dart.core/Object"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"335"},{"kind":"method","name":"lastWhere","id":"lastWhere2()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/collection/iterable.dart","line":"343"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"Object","refId":"dart.core/Object"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"343"},{"returnType":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"method","name":"singleWhere","id":"singleWhere1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/collection/iterable.dart","line":"357"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"357"},{"returnType":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"method","name":"elementAt","id":"elementAt1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"373"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","line":"278"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isEmpty","id":"isEmpty","line":"287"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isNotEmpty","id":"isNotEmpty","line":"289"},{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"property","name":"first","id":"first","line":"307"},{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"property","name":"last","id":"last","line":"315"},{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"property","name":"single","id":"single","line":"327"},{"kind":"constructor","name":"","id":"0()","line":"202"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"dart-sdk/lib/collection/iterable.dart","line":"199"}],"uri":"dart-sdk/lib/collection/collection.dart","line":"8"}],"kind":"library","id":"quiver.iterables","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"List","refId":"dart.core/List"}]},"kind":"method","name":"zip","id":"zip1()","comment":"\nReturns an [Iterable] of [List]s where the nth element in the returned\niterable contains the nth element from every Iterable in [iterables]. The\nreturned Iterable is as long as the shortest Iterable in the argument. If\n[iterables] is empty, it returns an empty list.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"Iterable","refId":"dart.core/Iterable"}]},"kind":"param","name":"iterables","id":"iterables"}],"uri":"file:///Users/justinfagnani/Documents/Projects/quiver-dart/lib/src/iterables/zip.dart","line":"23"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"num","refId":"dart.core/num"}]},"kind":"method","name":"range","id":"range3()","comment":"\nReturns an [Iterable] sequence of [num]s.\n\nIf only one argument is provided, [start_or_stop] is the upper bound for the\nsequence. If two or more arguments are provided, [stop] is the upper bound.\n\nThe sequence starts at 0 if one argument is provided, or [start_or_stop] if\ntwo or more arguments are provided. The sequence increments by 1, or [step]\nif provided. [step] can be negative, in which case the sequence counts down\nfrom the starting point and [stop] must be less than the starting point so\nthat it becomes the lower bound.\n","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"start_or_stop","id":"start_or_stop"},{"ref":{"name":"num","refId":"dart.core/num"},"isOptional":true,"kind":"param","name":"stop","id":"stop"},{"ref":{"name":"num","refId":"dart.core/num"},"isOptional":true,"kind":"param","name":"step","id":"step"}],"uri":"file:///Users/justinfagnani/Documents/Projects/quiver-dart/lib/src/iterables/range.dart","line":"29"},{"returnType":{"name":"Extent","refId":"quiver.iterables/Extent"},"kind":"method","name":"extent","id":"extent2()","comment":"\nReturns the minimum and maximum values in [i], according to the order\nspecified by the [compare] function, in an [Extent] instance.\n\nThe compare function must act as a [Comparator]. If [compare] is omitted,\n[Comparable.compare] is used. If [i] contains null elements, an exception\nwill be thrown.\n\nIf [i] is empty, an [Extent] is returned with [:null:] values for [:min:] and\n[:max:], since there are no valid values for them.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"param","name":"i","id":"i"},{"ref":{"name":"Comparator","refId":"dart.core/Comparator"},"defaultValue":"Comparable.compare","isOptional":true,"kind":"param","name":"compare","id":"compare"}],"uri":"file:///Users/justinfagnani/Documents/Projects/quiver-dart/lib/src/iterables/min_max.dart","line":"50"},{"kind":"method","name":"min","id":"min2()","comment":"\nReturns the minimum value in [i], according to the order specified by the\n[compare] function.\n\nThe compare function must act as a [Comparator]. If [compare] is omitted,\n[Comparable.compare] is used. If [i] contains null elements, an exception\nwill be thrown.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"param","name":"i","id":"i"},{"ref":{"name":"Comparator","refId":"dart.core/Comparator"},"defaultValue":"Comparable.compare","isOptional":true,"kind":"param","name":"compare","id":"compare"}],"uri":"file:///Users/justinfagnani/Documents/Projects/quiver-dart/lib/src/iterables/min_max.dart","line":"36"},{"kind":"method","name":"max","id":"max2()","comment":"\nReturns the maximum value in [i], according to the order specified by the\n[compare] function.\n\nThe compare function must act as a [Comparator]. If [compare] is omitted,\n[Comparable.compare] is used. If [i] contains null elements, an exception\nwill be thrown.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"param","name":"i","id":"i"},{"ref":{"name":"Comparator","refId":"dart.core/Comparator"},"defaultValue":"Comparable.compare","isOptional":true,"kind":"param","name":"compare","id":"compare"}],"uri":"file:///Users/justinfagnani/Documents/Projects/quiver-dart/lib/src/iterables/min_max.dart","line":"25"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"merge","id":"merge2()","comment":"\nReturns the result of merging an [Iterable] of [Iterable]s, according to\nthe order specified by the [compare] function. This function assumes the\nprovided iterables are already sorted according to the provided [compare]\nfunction. It will not check for this condition or sort the iterables.\n\nThe compare function must act as a [Comparator]. If [compare] is omitted,\n[Comparable.compare] is used.\n\nIf any of the [iterables] contain null elements, an exception will be\nthrown.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"Iterable","refId":"dart.core/Iterable"}]},"kind":"param","name":"iterables","id":"iterables"},{"ref":{"name":"Comparator","refId":"dart.core/Comparator"},"defaultValue":"Comparable.compare","isOptional":true,"kind":"param","name":"compare","id":"compare","line":"30"}],"uri":"file:///Users/justinfagnani/Documents/Projects/quiver-dart/lib/src/iterables/merge.dart","line":"29"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"IndexedValue","refId":"quiver.iterables/IndexedValue"}]},"kind":"method","name":"enumerate","id":"enumerate1()","comment":"\nReturns an [Iterable] of [IndexedValue]s where the nth value holds the nth\nelement of [iterable] and its index.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"param","name":"iterable","id":"iterable"}],"uri":"file:///Users/justinfagnani/Documents/Projects/quiver-dart/lib/src/iterables/enumerate.dart","line":"21"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"cycle","id":"cycle1()","comment":"\nReturns an [Iterable] that infinitely cycles through the elements of\n[iterable]. If [iterable] is empty, the returned Iterable will also be empty.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"param","name":"iterable","id":"iterable"}],"uri":"file:///Users/justinfagnani/Documents/Projects/quiver-dart/lib/src/iterables/cycle.dart","line":"21"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"num","refId":"dart.core/num"}]},"kind":"method","name":"count","id":"count2()","comment":"\nReturns an infinite [Iterable] of [num]s, starting from [start] and\nincreasing by [step].\n","children":[{"ref":{"name":"num","refId":"dart.core/num"},"defaultValue":"0","isOptional":true,"kind":"param","name":"start","id":"start"},{"ref":{"name":"num","refId":"dart.core/num"},"defaultValue":"1","isOptional":true,"kind":"param","name":"step","id":"step"}],"uri":"file:///Users/justinfagnani/Documents/Projects/quiver-dart/lib/src/iterables/count.dart","line":"21"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"List","refId":"dart.core/List"}]}],"kind":"class","name":"_ZipIterator","id":"_ZipIterator","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"moveNext","id":"moveNext0()","line":"43"},{"ref":{"name":"List","refId":"dart.core/List"},"kind":"property","name":"current","id":"current","line":"41"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Iterator","refId":"dart.core/Iterator"}]},"isFinal":true,"kind":"variable","name":"_iterators","id":"_iterators","isPrivate":true,"line":"36"},{"ref":{"name":"List","refId":"dart.core/List"},"kind":"variable","name":"_current","id":"_current","isPrivate":true,"line":"37"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Iterator","refId":"dart.core/Iterator"}]},"initializedField":{"name":"_iterators","refId":"quiver.iterables/_ZipIterator/_iterators"},"kind":"param","name":"_iterators","id":"_iterators","isPrivate":true}],"line":"39"}],"isPrivate":true,"uri":"file:///Users/justinfagnani/Documents/Projects/quiver-dart/lib/src/iterables/zip.dart","line":"35"},{"superclass":{"name":"IterableBase","refId":"dart.collection/IterableBase","arguments":[{"name":"List","refId":"dart.core/List"}]},"kind":"class","name":"_Zip","id":"_Zip","children":[{"ref":{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"List","refId":"dart.core/List"}]},"kind":"property","name":"iterator","id":"iterator","line":"31"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"Iterable","refId":"dart.core/Iterable"}]},"isFinal":true,"kind":"variable","name":"iterables","id":"iterables","line":"27"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"Iterable","refId":"dart.core/Iterable"}]},"initializedField":{"name":"iterables","refId":"quiver.iterables/_Zip/iterables"},"kind":"param","name":"iterables","id":"iterables"}],"line":"29"}],"isPrivate":true,"uri":"file:///Users/justinfagnani/Documents/Projects/quiver-dart/lib/src/iterables/zip.dart","line":"26"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"num","refId":"dart.core/num"}]}],"kind":"class","name":"_RangeIterator","id":"_RangeIterator","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"moveNext","id":"moveNext0()","line":"70"},{"ref":{"name":"num","refId":"dart.core/num"},"kind":"property","name":"current","id":"current","line":"68"},{"ref":{"name":"num","refId":"dart.core/num"},"isFinal":true,"kind":"variable","name":"_stop","id":"_stop","isPrivate":true,"line":"57"},{"ref":{"name":"num","refId":"dart.core/num"},"isFinal":true,"kind":"variable","name":"_step","id":"_step","isPrivate":true,"line":"57"},{"ref":{"name":"num","refId":"dart.core/num"},"kind":"variable","name":"_value","id":"_value","isPrivate":true,"line":"58"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"_hasNext","id":"_hasNext","isPrivate":true,"line":"59"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"_inRange","id":"_inRange","isPrivate":true,"line":"60"},{"kind":"constructor","name":"","id":"3()","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"stop","id":"stop"},{"ref":{"name":"num","refId":"dart.core/num"},"initializedField":{"name":"_step","refId":"quiver.iterables/_RangeIterator/_step"},"kind":"param","name":"_step","id":"_step","isPrivate":true}],"line":"62"}],"isPrivate":true,"uri":"file:///Users/justinfagnani/Documents/Projects/quiver-dart/lib/src/iterables/range.dart","line":"56"},{"superclass":{"name":"IterableBase","refId":"dart.collection/IterableBase","arguments":[{"name":"num","refId":"dart.core/num"}]},"kind":"class","name":"_Range","id":"_Range","children":[{"ref":{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"num","refId":"dart.core/num"}]},"kind":"property","name":"iterator","id":"iterator","line":"53"},{"ref":{"name":"num","refId":"dart.core/num"},"isFinal":true,"kind":"variable","name":"start","id":"start","line":"33"},{"ref":{"name":"num","refId":"dart.core/num"},"isFinal":true,"kind":"variable","name":"stop","id":"stop","line":"33"},{"ref":{"name":"num","refId":"dart.core/num"},"isFinal":true,"kind":"variable","name":"step","id":"step","line":"33"},{"kind":"constructor","name":"","id":"3()","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"start_or_stop","id":"start_or_stop"},{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"_stop","id":"_stop","isPrivate":true},{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"_step","id":"_step","isPrivate":true}],"line":"35"}],"isPrivate":true,"uri":"file:///Users/justinfagnani/Documents/Projects/quiver-dart/lib/src/iterables/range.dart","line":"32"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"Extent","id":"Extent","children":[{"isFinal":true,"kind":"variable","name":"min","id":"min","line":"64"},{"isFinal":true,"kind":"variable","name":"max","id":"max","line":"65"},{"kind":"constructor","name":"","id":"2()","children":[{"initializedField":{"name":"min","refId":"quiver.iterables/Extent/min"},"kind":"param","name":"min","id":"min"},{"initializedField":{"name":"max","refId":"quiver.iterables/Extent/max"},"kind":"param","name":"max","id":"max"}],"line":"66"}],"uri":"file:///Users/justinfagnani/Documents/Projects/quiver-dart/lib/src/iterables/min_max.dart","line":"63"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"Iterator","refId":"dart.core/Iterator"}],"kind":"class","name":"_MergeIterator","id":"_MergeIterator","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"moveNext","id":"moveNext0()","line":"71"},{"kind":"property","name":"current","id":"current","line":"90"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"_IteratorPeeker","refId":"quiver.iterables/_IteratorPeeker"}]},"isFinal":true,"kind":"variable","name":"_peekers","id":"_peekers","isPrivate":true,"line":"64"},{"ref":{"name":"Comparator","refId":"dart.core/Comparator"},"isFinal":true,"kind":"variable","name":"_compare","id":"_compare","isPrivate":true,"line":"65"},{"kind":"variable","name":"_current","id":"_current","isPrivate":true,"line":"66"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Iterator","refId":"dart.core/Iterator"}]},"kind":"param","name":"iterators","id":"iterators"},{"ref":{"name":"Comparator","refId":"dart.core/Comparator"},"initializedField":{"name":"_compare","refId":"quiver.iterables/_MergeIterator/_compare"},"kind":"param","name":"_compare","id":"_compare","isPrivate":true}],"line":"68"}],"isPrivate":true,"uri":"file:///Users/justinfagnani/Documents/Projects/quiver-dart/lib/src/iterables/merge.dart","line":"63"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"_IteratorPeeker","id":"_IteratorPeeker","comment":"Like [Iterator] but one element ahead.","children":[{"kind":"method","name":"moveNext","id":"moveNext0()","line":"56"},{"kind":"property","name":"current","id":"current","line":"60"},{"ref":{"name":"Iterator","refId":"dart.core/Iterator"},"isFinal":true,"kind":"variable","name":"_iterator","id":"_iterator","isPrivate":true,"line":"49"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"_hasCurrent","id":"_hasCurrent","isPrivate":true,"line":"50"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"Iterator","refId":"dart.core/Iterator"},"kind":"param","name":"iterator","id":"iterator"}],"line":"52"}],"isPrivate":true,"uri":"file:///Users/justinfagnani/Documents/Projects/quiver-dart/lib/src/iterables/merge.dart","line":"48"},{"superclass":{"name":"IterableBase","refId":"dart.collection/IterableBase"},"kind":"class","name":"_Merge","id":"_Merge","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"44"},{"ref":{"name":"Iterator","refId":"dart.core/Iterator"},"kind":"property","name":"iterator","id":"iterator","line":"39"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"Iterable","refId":"dart.core/Iterable"}]},"isFinal":true,"kind":"variable","name":"_iterables","id":"_iterables","isPrivate":true,"line":"34"},{"ref":{"name":"Comparator","refId":"dart.core/Comparator"},"isFinal":true,"kind":"variable","name":"_compare","id":"_compare","isPrivate":true,"line":"35"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"Iterable","refId":"dart.core/Iterable"}]},"initializedField":{"name":"_iterables","refId":"quiver.iterables/_Merge/_iterables"},"kind":"param","name":"_iterables","id":"_iterables","isPrivate":true},{"ref":{"name":"Comparator","refId":"dart.core/Comparator"},"initializedField":{"name":"_compare","refId":"quiver.iterables/_Merge/_compare"},"kind":"param","name":"_compare","id":"_compare","isPrivate":true}],"line":"37"}],"isPrivate":true,"uri":"file:///Users/justinfagnani/Documents/Projects/quiver-dart/lib/src/iterables/merge.dart","line":"33"},{"superclass":{"name":"IterableBase","refId":"dart.collection/IterableBase","arguments":[{"name":"T","refId":"quiver.iterables/InfiniteIterable/T"}]},"isAbstract":true,"kind":"class","name":"InfiniteIterable","id":"InfiniteIterable","comment":"\nA base class for [Iterable]s of infinite length that throws\n[UnsupportedError] for methods that would require the Iterable to terminate.\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"every","id":"every1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"num","id":"num","uri":"file:///Users/justinfagnani/Documents/Projects/quiver-dart/lib/src/iterables/infinite_iterable.dart","line":"32"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"32"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"fold","id":"fold2()","children":[{"kind":"param","name":"initialValue","id":"initialValue"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"previousValue","id":"previousValue","uri":"file:///Users/justinfagnani/Documents/Projects/quiver-dart/lib/src/iterables/infinite_iterable.dart","line":"34"},{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"element","id":"element","uri":"file:///Users/justinfagnani/Documents/Projects/quiver-dart/lib/src/iterables/infinite_iterable.dart","line":"34"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"34"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"forEach","id":"forEach1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"element","id":"element","uri":"file:///Users/justinfagnani/Documents/Projects/quiver-dart/lib/src/iterables/infinite_iterable.dart","line":"37"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"37"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"join","id":"join1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"kind":"param","name":"separator","id":"separator"}],"line":"39"},{"kind":"method","name":"lastWhere","id":"lastWhere2()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"value","id":"value","uri":"file:///Users/justinfagnani/Documents/Projects/quiver-dart/lib/src/iterables/infinite_iterable.dart","line":"41"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"Object","refId":"dart.core/Object"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"41"},{"returnType":{"name":"num","refId":"dart.core/num"},"kind":"method","name":"reduce","id":"reduce1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"returnType":{"name":"num","refId":"dart.core/num"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"value","id":"value","uri":"file:///Users/justinfagnani/Documents/Projects/quiver-dart/lib/src/iterables/infinite_iterable.dart","line":"44"},{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"element","id":"element","uri":"file:///Users/justinfagnani/Documents/Projects/quiver-dart/lib/src/iterables/infinite_iterable.dart","line":"44"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"44"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"num","refId":"dart.core/num"}]},"kind":"method","name":"toList","id":"toList1()","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"isNamed":true,"kind":"param","name":"growable","id":"growable"}],"line":"47"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"num","refId":"dart.core/num"}]},"kind":"method","name":"toSet","id":"toSet0()","line":"50"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isEmpty","id":"isEmpty","line":"22"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isNotEmpty","id":"isNotEmpty","line":"24"},{"ref":{"name":"num","refId":"dart.core/num"},"kind":"property","name":"last","id":"last","line":"26"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","line":"28"},{"ref":{"name":"num","refId":"dart.core/num"},"kind":"property","name":"single","id":"single","line":"30"},{"kind":"typeparam","name":"T","id":"T"}],"uri":"file:///Users/justinfagnani/Documents/Projects/quiver-dart/lib/src/iterables/infinite_iterable.dart","line":"21"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"IndexedValue","id":"IndexedValue","children":[{"ref":{"name":"int","refId":"dart.core/int"},"isFinal":true,"kind":"variable","name":"index","id":"index","line":"27"},{"ref":{"name":"V","refId":"quiver.iterables/IndexedValue/V"},"isFinal":true,"kind":"variable","name":"value","id":"value","line":"28"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"initializedField":{"name":"index","refId":"quiver.iterables/IndexedValue/index"},"kind":"param","name":"index","id":"index"},{"ref":{"name":"V","refId":"quiver.iterables/IndexedValue/V"},"initializedField":{"name":"value","refId":"quiver.iterables/IndexedValue/value"},"kind":"param","name":"value","id":"value"}],"line":"30"},{"kind":"typeparam","name":"V","id":"V"}],"uri":"file:///Users/justinfagnani/Documents/Projects/quiver-dart/lib/src/iterables/enumerate.dart","line":"26"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"T","refId":"quiver.iterables/_CycleIterator/T"}]}],"kind":"class","name":"_CycleIterator","id":"_CycleIterator","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"moveNext","id":"moveNext0()","line":"47"},{"ref":{"name":"T","refId":"quiver.iterables/_CycleIterator/T"},"kind":"property","name":"current","id":"current","line":"45"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"T","refId":"quiver.iterables/_CycleIterator/T"}]},"isFinal":true,"kind":"variable","name":"_iterable","id":"_iterable","isPrivate":true,"line":"38"},{"ref":{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"T","refId":"quiver.iterables/_CycleIterator/T"}]},"kind":"variable","name":"_iterator","id":"_iterator","isPrivate":true,"line":"39"},{"kind":"constructor","name":"","id":"1()","children":[{"kind":"param","name":"_iterable","id":"_iterable","isPrivate":true}],"line":"41"},{"kind":"typeparam","name":"T","id":"T"}],"isPrivate":true,"uri":"file:///Users/justinfagnani/Documents/Projects/quiver-dart/lib/src/iterables/cycle.dart","line":"37"},{"superclass":{"name":"InfiniteIterable","refId":"quiver.iterables/InfiniteIterable","arguments":[{"name":"T","refId":"quiver.iterables/_Cycle/T"}]},"kind":"class","name":"_Cycle","id":"_Cycle","children":[{"ref":{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"T","refId":"quiver.iterables/_Cycle/T"}]},"kind":"property","name":"iterator","id":"iterator","line":"28"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isEmpty","id":"isEmpty","line":"30"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isNotEmpty","id":"isNotEmpty","line":"32"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"T","refId":"quiver.iterables/_Cycle/T"}]},"isFinal":true,"kind":"variable","name":"_iterable","id":"_iterable","isPrivate":true,"line":"24"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"T","refId":"quiver.iterables/_Cycle/T"}]},"initializedField":{"name":"_iterable","refId":"quiver.iterables/_Cycle/_iterable"},"kind":"param","name":"_iterable","id":"_iterable","isPrivate":true}],"line":"26"},{"kind":"typeparam","name":"T","id":"T"}],"isPrivate":true,"uri":"file:///Users/justinfagnani/Documents/Projects/quiver-dart/lib/src/iterables/cycle.dart","line":"23"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"num","refId":"dart.core/num"}]}],"kind":"class","name":"_CountIterator","id":"_CountIterator","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"moveNext","id":"moveNext0()","line":"42"},{"ref":{"name":"num","refId":"dart.core/num"},"kind":"property","name":"current","id":"current","line":"40"},{"ref":{"name":"num","refId":"dart.core/num"},"isFinal":true,"kind":"variable","name":"_start","id":"_start","isPrivate":true,"line":"35"},{"ref":{"name":"num","refId":"dart.core/num"},"isFinal":true,"kind":"variable","name":"_step","id":"_step","isPrivate":true,"line":"35"},{"ref":{"name":"num","refId":"dart.core/num"},"kind":"variable","name":"_current","id":"_current","isPrivate":true,"line":"36"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"num","refId":"dart.core/num"},"initializedField":{"name":"_start","refId":"quiver.iterables/_CountIterator/_start"},"kind":"param","name":"_start","id":"_start","isPrivate":true},{"ref":{"name":"num","refId":"dart.core/num"},"initializedField":{"name":"_step","refId":"quiver.iterables/_CountIterator/_step"},"kind":"param","name":"_step","id":"_step","isPrivate":true}],"line":"38"}],"isPrivate":true,"uri":"file:///Users/justinfagnani/Documents/Projects/quiver-dart/lib/src/iterables/count.dart","line":"34"},{"superclass":{"name":"InfiniteIterable","refId":"quiver.iterables/InfiniteIterable","arguments":[{"name":"num","refId":"dart.core/num"}]},"kind":"class","name":"_Count","id":"_Count","children":[{"ref":{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"num","refId":"dart.core/num"}]},"kind":"property","name":"iterator","id":"iterator","line":"28"},{"ref":{"name":"num","refId":"dart.core/num"},"isFinal":true,"kind":"variable","name":"start","id":"start","line":"24"},{"ref":{"name":"num","refId":"dart.core/num"},"isFinal":true,"kind":"variable","name":"step","id":"step","line":"24"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"num","refId":"dart.core/num"},"initializedField":{"name":"start","refId":"quiver.iterables/_Count/start"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"num","refId":"dart.core/num"},"initializedField":{"name":"step","refId":"quiver.iterables/_Count/step"},"kind":"param","name":"step","id":"step"}],"line":"26"}],"isPrivate":true,"uri":"file:///Users/justinfagnani/Documents/Projects/quiver-dart/lib/src/iterables/count.dart","line":"23"}],"uri":"file:///Users/justinfagnani/Documents/Projects/quiver-dart/lib/iterables.dart","line":"15"}