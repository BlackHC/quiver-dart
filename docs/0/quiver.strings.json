{"kind":"library","id":"quiver.strings","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_repeat","id":"_repeat3()","children":[{"ref":{"name":"StringBuffer","refId":"dart.core/StringBuffer"},"kind":"param","name":"sink","id":"sink"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"s","id":"s"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"times","id":"times"}],"isPrivate":true,"line":"109"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"loop","id":"loop3()","comment":"\nLoops over [s] and returns traversed characters. Takes arbitrary [from] and\n[to] indices. Works as a substitute for [String.substring], except it never\nthrows [RangeError]. Supports negative indices. Think of an index as a\ncoordinate in an infinite in both directions vector filled with repeating\nstring [s], whose 0-th coordinate coincides with the 0-th character in [s].\nThen [loop] returns the sub-vector defined by the interval ([from], [to]).\n[from] is inclusive. [to] is exclusive.\n\nThis method throws exceptions on [null] and empty strings.\n\nIf [to] is omitted or is [null] the traversing ends at the end of the loop.\n\nIf [to] < [from], traverses [s] in the opposite direction.\n\nFor example:\n\nloop('Hello, World!', 7) == 'World!'\nloop('ab', 6) == 'ababab'\nloop('test.txt', -3) == 'txt'\nloop('ldwor', -3, 2) == 'world'\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"s","id":"s"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"from","id":"from"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"to","id":"to"}],"line":"86"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"repeat","id":"repeat2()","comment":"\nConcatenates [s] to itself a given number of [times]. Empty and null\nstrings will always result in empty and null strings respectively no matter\nhow many [times] they are [repeat]ed.\n\nIf [times] is negative, returns the [flip]ped string repeated given number\nof [times].\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"s","id":"s"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"times","id":"times"}],"line":"54"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"emptyToNull","id":"emptyToNull1()","comment":"\nIf [s] is an empty string returns [null], otherwise returns [s] as is.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"s","id":"s"}],"line":"44"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"nullToEmpty","id":"nullToEmpty1()","comment":"\nIf [s] is [null] returns empty string, otherwise returns [s] as is.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"s","id":"s"}],"line":"39"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"flip","id":"flip1()","comment":"\nReturns a string with characters from the given [s] in reverse order.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"s","id":"s"}],"line":"26"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"isBlank","id":"isBlank1()","comment":"\nReturns [true] if [s] is either null, empty or is solely made of whitespace\ncharacters (as defined by [String.trim].\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"s","id":"s"}],"line":"21"}],"uri":"file:///Users/justinfagnani/Documents/Projects/quiver-dart/lib/strings.dart","line":"15"}