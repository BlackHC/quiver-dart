{"dependencies":[{"kind":"library","name":"dart:core","id":"dart.core","comment":"\n\nBuilt-in types, collections,\nand other core functionality for every Dart program.\n\nThis library is automatically imported.\n\nSome classes in this library,\nsuch as [String] and [num],\nsupport Dart's built-in data types.\nOther classes, such as [List] and [Map], provide data structures\nfor managing collections of objects.\nAnd still other classes represent commonly used types of data\nsuch as URIs, dates and times, and errors.\n\n## Numbers and booleans\n\n[int] and [double] provide support for Dart's built-in numerical data types:\nintegers and double-precision floating point numbers, respectively.\nAn object of type [bool] is either true or false.\nVariables of these types can be constructed from literals:\n\n    int meaningOfLife = 42;\n    double valueOfPi  = 3.141592;\n    bool visible      = true;\n\n## Strings and regular expressions\n\nA [String] is immutable and represents a sequence of characters.\n\n    String shakespeareQuote = \"All the world's a stage, ...\";\n\n[StringBuffer] provides a way to construct strings efficiently.\n\n    StringBuffer moreShakespeare = new StringBuffer();\n    moreShakespeare.write('And all the men and women ');\n    moreShakespeare.write('merely players; ...');\n\nThe String and StringBuffer classes implement string concatenation,\ninterpolation, and other string manipulation features.\n\n    String philosophy = 'Live on ';\n    String get palindrome => philosophy + philosophy.split('').reversed.join();\n\n[RegExp] implements Dart regular expressions,\nwhich provide a grammar for matching patterns within text.\nFor example, here's a regular expression that matches\na string of one or more digits:\n\n    var numbers = new RegExp(r'\\d+');\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n## Collections\n\nThe dart:core library provides basic collections,\nsuch as [List], [Map], and [Set].\n\nA List is an ordered collection of objects, with a length.\nLists are sometimes called arrays.\nUse a List when you need to access objects by index.\n\n    List superheroes = [ 'Batman', 'Superman', 'Harry Potter' ];\n\nA Set is an unordered collection of unique objects.\nYou cannot get an item by index (position).\nAdding a duplicate item has no effect.\n\n    Set villians = new Set();\n    villians.add('Joker');\n    villians.addAll( ['Lex Luther', 'Voldemort'] );\n\nA Map is an unordered collection of key-value pairs.\nMaps are sometimes called associative arrays because\nmaps associate a key to some value for easy retrieval.\nKeys are unique.\nUse a Map when you need to access objects\nby a unique identifier.\n\n    Map sidekicks = { 'Batman': 'Robin',\n                      'Superman': 'Lois Lane',\n                      'Harry Potter': 'Ron and Hermione' };\n\nIn addition to these classes,\ndart:core contains [Iterable],\nan interface that defines functionality\ncommon in collections of objects.\nExamples include the ability\nto run a function on each element in the collection,\nto apply a test to each element, \nto retrieve an object, and to determine length.\n\nIterable is implemented by List and Set,\nand used by Map for its keys and values.\n\nFor other kinds of collections, check out the\n[dart:collection](#dart-collection) library.\n\n## Date and time\n\nUse [DateTime] to represent a point in time\nand [Duration] to represent a span of time.\n\nYou can create DateTime objects with constructors\nor by parsing a correctly formatted string.\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20\");\n\nCreate a Duration object specifying the individual time units.\n\n    Duration timeRemaining = new Duration(hours:56, minutes:14);\n\nIn addition to DateTime and Duration,\ndart:core contains the [Stopwatch] class for measuring elapsed time.\n    \n## Uri\n\nA [Uri] object represents a uniform resource identifier,\nwhich identifies a resource on the web.\n\n    Uri dartlang = Uri.parse('http://dartlang.org/');\n    \n## Errors\n\nThe [Error] class represents the occurrence of an error\nduring runtime.\nSubclasses of this class represent specific kinds of errors.\n\n## Other documentation\n\nFor more information about how to use the built-in types, refer to\n[Built-in Types](http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html#built-in-types)\nin Chapter 2 of\n[Dart: Up and Running](http://www.dartlang.org/docs/dart-up-and-running/).\n\nAlso, see\n[dart:core - Numbers, Collections, Strings, and More](http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartcore---strings-collections-and-more)\nfor more coverage of classes in this package.\n\nThe \n[Dart Language Specification](https://www.dartlang.org/docs/spec/)\nprovides technical details.\n","children":[{"kind":"class","name":"Object","id":"Object","comment":"\nEverything in Dart is an [Object].\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nOverride this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:\n\n * Total: It must return a boolean for all arguments. It should never throw\n   or return `null`.\n\n * Reflexive: For all objects `o`, `o == o` must be true.\n\n * Symmetric: For all objects `o1` and `o2`, `o1 == o2` and `o2 == o1` must\n   either both be true, or both be false.\n\n * Transitive: For all objects `o1`, `o2`, and `o3`, if `o1 == o2` and\n   `o2 == o3` are true, then `o1 == o3` must be true.\n\nThe method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","children":[{"kind":"param","name":"other","id":"other"}],"line":"48"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a string representation of this object.\n","line":"67"},{"kind":"method","name":"noSuchMethod","id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","children":[{"ref":{"name":"Invocation","refId":"dart.core/Invocation"},"kind":"param","name":"invocation","id":"invocation"}],"line":"79"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"62"},{"ref":{"name":"Type","refId":"dart.core/Type"},"kind":"property","name":"runtimeType","id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","line":"84"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"18"}],"uri":"dart-sdk/lib/core/object.dart","line":"10"}],"uri":"dart-sdk/lib/core/core.dart","line":"153"},{"kind":"library","name":"dart:async","id":"dart.async","comment":"\nSupport for asynchronous programming,\nwith classes such as Future and Stream.\n\nFor an introduction to using dart:async, see the\n[dart:async section of the language tour]\n(https://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-asynchronous-programming).\nAlso see\n[articles](https://www.dartlang.org/articles/)\nsuch as\n[Using Future Based APIs]\n(https://www.dartlang.org/articles/using-future-based-apis/).\n","children":[{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Stream","id":"Stream","comment":"\nA source of asynchronous data events.\n\nA Stream provides a sequence of events. Each event is either a data event or\nan error event, representing the result of a single computation. When the\nStream is exhausted, it may send a single \"done\" event.\n\nYou can [listen] on a stream to receive the events it sends. When you listen,\nyou receive a [StreamSubscription] object that can be used to stop listening,\nor to temporarily pause events from the stream.\n\nWhen an event is fired, the listeners at that time are informed.\nIf a listener is added while an event is being fired, the change\nwill only take effect after the event is completely fired. If a listener\nis canceled, it immediately stops receiving events.\n\nWhen the \"done\" event is fired, subscribers are unsubscribed before\nreceiving the event. After the event has been sent, the stream has no\nsubscribers. Adding new subscribers after this point is allowed, but\nthey will just receive a new \"done\" event as soon as possible.\n\nStreams always respect \"pause\" requests. If necessary they need to buffer\ntheir input, but often, and preferably, they can simply request their input\nto pause too.\n\nThere are two kinds of streams: The normal \"single-subscription\" streams and\n\"broadcast\" streams.\n\nA single-subscription stream allows only a single listener at a time.\nIt holds back events until it gets a listener, and it may exhaust\nitself when the listener is unsubscribed, even if the stream wasn't done.\n\nSingle-subscription streams are generally used for streaming parts of\ncontiguous data like file I/O.\n\nA broadcast stream allows any number of listeners, and it fires\nits events when they are ready, whether there are listeners or not.\n\nBroadcast streams are used for independent events/observers.\n\nThe default implementation of [isBroadcast] returns false.\nA broadcast stream inheriting from [Stream] must override [isBroadcast]\nto return [:true:].\n","children":[{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"method","name":"asBroadcastStream","id":"asBroadcastStream2()","comment":"\nReturns a multi-subscription stream that produces the same events as this.\n\nIf this stream is already a broadcast stream, it is returned unmodified.\n\nIf this stream is single-subscription, return a new stream that allows\nmultiple subscribers. It will subscribe to this stream when its first\nsubscriber is added, and will stay subscribed until this stream ends,\nor a callback cancels the subscription.\n\nIf [onListen] is provided, it is called with a subscription-like object\nthat represents the underlying subscription to this stream. It is\npossible to pause, resume or cancel the subscription during the call\nto [onListen]. It is not possible to change the event handlers, including\nusing [StreamSubscription.asFuture].\n\nIf [onCancel] is provided, it is called in a similar way to [onListen]\nwhen the returned stream stops having listener. If it later gets\na new listener, the [onListen] function is called again.\n\nUse the callbacks, for example, for pausing the underlying subscription\nwhile having no subscribers to prevent losing events, or canceling the\nsubscription when there are no listeners.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"onListen","id":"onListen","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"StreamSubscription","refId":"dart.async/StreamSubscription","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"param","name":"subscription","id":"subscription","uri":"dart-sdk/lib/async/stream.dart","line":"179"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"179"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"onCancel","id":"onCancel","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"StreamSubscription","refId":"dart.async/StreamSubscription","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"param","name":"subscription","id":"subscription","uri":"dart-sdk/lib/async/stream.dart","line":"180"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"180"}],"line":"178"},{"returnType":{"name":"StreamSubscription","refId":"dart.async/StreamSubscription","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"method","name":"listen","id":"listen4()","comment":"\nAdds a subscription to this stream.\n\nOn each data event from this stream, the subscriber's [onData] handler\nis called. If [onData] is null, nothing happens.\n\nOn errors from this stream, the [onError] handler is given a\nobject describing the error.\n\nIf this stream closes, the [onDone] handler is called.\n\nIf [cancelOnError] is true, the subscription is ended when\nthe first error is reported. The default is false.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"onData","id":"onData","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"T","refId":"dart.async/Stream/T"},"kind":"param","name":"event","id":"event","uri":"dart-sdk/lib/async/stream.dart","line":"199"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"onError","id":"onError","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"error","id":"error","uri":"dart-sdk/lib/async/stream.dart","line":"200"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"200"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"onDone","id":"onDone","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"201"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"isNamed":true,"kind":"param","name":"cancelOnError","id":"cancelOnError","line":"202"}],"line":"199"},{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"method","name":"where","id":"where1()","comment":"\nCreates a new stream from this stream that discards some data events.\n\nThe new stream sends the same error and done events as this stream,\nbut it only sends the data events that satisfy the [test].\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"T","refId":"dart.async/Stream/T"},"kind":"param","name":"event","id":"event","uri":"dart-sdk/lib/async/stream.dart","line":"210"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"210"},{"returnType":{"name":"Stream","refId":"dart.async/Stream"},"kind":"method","name":"map","id":"map1()","comment":"\nCreates a new stream that converts each element of this stream\nto a new value using the [convert] function.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"convert","id":"convert","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"T","refId":"dart.async/Stream/T"},"kind":"param","name":"event","id":"event","uri":"dart-sdk/lib/async/stream.dart","line":"218"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"218"},{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"method","name":"handleError","id":"handleError2()","comment":"\nCreates a wrapper Stream that intercepts some errors from this stream.\n\nIf this stream sends an error that matches [test], then it is intercepted\nby the [handle] function.\n\nAn [AsyncError] [:e:] is matched by a test function if [:test(e):] returns\ntrue. If [test] is omitted, every error is considered matching.\n\nIf the error is intercepted, the [handle] function can decide what to do\nwith it. It can throw if it wants to raise a new (or the same) error,\nor simply return to make the stream forget the error.\n\nIf you need to transform an error into a data event, use the more generic\n[Stream.transform] to handle the event by writing a data event to\nthe output sink\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"handle","id":"handle","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"error","id":"error","uri":"dart-sdk/lib/async/stream.dart","line":"239"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"error","id":"error","uri":"dart-sdk/lib/async/stream.dart","line":"239"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"239"},{"returnType":{"name":"Stream","refId":"dart.async/Stream"},"kind":"method","name":"expand","id":"expand1()","comment":"\nCreates a new stream from this stream that converts each element\ninto zero or more events.\n\nEach incoming event is converted to an [Iterable] of new events,\nand each of these new events are then sent by the returned stream\nin order.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"convert","id":"convert","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"T","refId":"dart.async/Stream/T"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/async/stream.dart","line":"251"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"251"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"kind":"method","name":"pipe","id":"pipe1()","comment":"\nBinds this stream as the input of the provided [StreamConsumer].\n","children":[{"ref":{"name":"StreamConsumer","refId":"dart.async/StreamConsumer","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"param","name":"streamConsumer","id":"streamConsumer"}],"line":"258"},{"returnType":{"name":"Stream","refId":"dart.async/Stream"},"kind":"method","name":"transform","id":"transform1()","comment":"\nChains this stream as the input of the provided [StreamTransformer].\n\nReturns the result of [:streamTransformer.bind:] itself.\n","children":[{"ref":{"name":"StreamTransformer","refId":"dart.async/StreamTransformer","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"param","name":"streamTransformer","id":"streamTransformer"}],"line":"267"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"method","name":"reduce","id":"reduce1()","comment":"\nReduces a sequence of values by repeatedly applying [combine].\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"returnType":{"name":"T","refId":"dart.async/Stream/T"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"T","refId":"dart.async/Stream/T"},"kind":"param","name":"previous","id":"previous","uri":"dart-sdk/lib/async/stream.dart","line":"274"},{"ref":{"name":"T","refId":"dart.async/Stream/T"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/async/stream.dart","line":"274"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"274"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"kind":"method","name":"fold","id":"fold2()","comment":"Reduces a sequence of values by repeatedly applying [combine]. ","children":[{"kind":"param","name":"initialValue","id":"initialValue"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"previous","id":"previous","uri":"dart-sdk/lib/async/stream.dart","line":"304"},{"ref":{"name":"T","refId":"dart.async/Stream/T"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/async/stream.dart","line":"304"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"304"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"join","id":"join1()","comment":"\nCollects string of data events' string representations.\n\nIf [separator] is provided, it is inserted between any two\nelements.\n\nAny error in the stream causes the future to complete with that\nerror. Otherwise it completes with the collected string when\nthe \"done\" event arrives.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"\"","isOptional":true,"kind":"param","name":"separator","id":"separator"}],"line":"336"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"bool","refId":"dart.core/bool"}]},"kind":"method","name":"contains","id":"contains1()","comment":"\nChecks whether [needle] occurs in the elements provided by this stream.\n\nCompletes the [Future] when the answer is known.\nIf this stream reports an error, the [Future] will report that error.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"needle","id":"needle"}],"line":"370"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"kind":"method","name":"forEach","id":"forEach1()","comment":"\nExecutes [action] on each data event of the stream.\n\nCompletes the returned [Future] when all events of the stream\nhave been processed. Completes the future with an error if the\nstream has an error event, or if [action] throws.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"action","id":"action","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"T","refId":"dart.async/Stream/T"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/async/stream.dart","line":"401"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"401"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"bool","refId":"dart.core/bool"}]},"kind":"method","name":"every","id":"every1()","comment":"\nChecks whether [test] accepts all elements provided by this stream.\n\nCompletes the [Future] when the answer is known.\nIf this stream reports an error, the [Future] will report that error.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"T","refId":"dart.async/Stream/T"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/async/stream.dart","line":"426"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"426"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"bool","refId":"dart.core/bool"}]},"kind":"method","name":"any","id":"any1()","comment":"\nChecks whether [test] accepts any element provided by this stream.\n\nCompletes the [Future] when the answer is known.\nIf this stream reports an error, the [Future] will report that error.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"T","refId":"dart.async/Stream/T"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/async/stream.dart","line":"456"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"456"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]}]},"kind":"method","name":"toList","id":"toList0()","comment":"Collects the data of this stream in a [List]. ","line":"513"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]}]},"kind":"method","name":"toSet","id":"toSet0()","comment":"Collects the data of this stream in a [Set]. ","line":"529"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"kind":"method","name":"drain","id":"drain1()","comment":"\nDiscards all data on the stream, but signals when it's done or an error\noccured.\n\nWhen subscribing using [drain], cancelOnError will be true. This means\nthat the future will complete with the first error on the stream and then\ncancel the subscription.\n\nIn case of a `done` event the future completes with the given\n[futureValue].\n","children":[{"isOptional":true,"kind":"param","name":"futureValue","id":"futureValue"}],"line":"555"},{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"method","name":"take","id":"take1()","comment":"\nProvides at most the first [n] values of this stream.\n\nForwards the first [n] data events of this stream, and all error\nevents, to the returned stream, and ends with a done event.\n\nIf this stream produces fewer than [count] values before it's done,\nso will the returned stream.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"count","id":"count"}],"line":"567"},{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"method","name":"takeWhile","id":"takeWhile1()","comment":"\nForwards data events while [test] is successful.\n\nThe returned stream provides the same events as this stream as long\nas [test] returns [:true:] for the event data. The stream is done\nwhen either this stream is done, or when this stream first provides\na value that [test] doesn't accept.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"T","refId":"dart.async/Stream/T"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/async/stream.dart","line":"579"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"579"},{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"method","name":"skip","id":"skip1()","comment":"\nSkips the first [count] data events from this stream.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"count","id":"count"}],"line":"586"},{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"method","name":"skipWhile","id":"skipWhile1()","comment":"\nSkip data events from this stream while they are matched by [test].\n\nError and done events are provided by the returned stream unmodified.\n\nStarting with the first data event where [test] returns false for the\nevent data, the returned stream will have the same events as this stream.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"T","refId":"dart.async/Stream/T"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/async/stream.dart","line":"598"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"598"},{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"method","name":"distinct","id":"distinct1()","comment":"\nSkips data events if they are equal to the previous data event.\n\nThe returned stream provides the same events as this stream, except\nthat it never provides two consequtive data events that are equal.\n\nEquality is determined by the provided [equals] method. If that is\nomitted, the '==' operator on the last provided data element is used.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"kind":"param","name":"equals","id":"equals","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"T","refId":"dart.async/Stream/T"},"kind":"param","name":"previous","id":"previous","uri":"dart-sdk/lib/async/stream.dart","line":"611"},{"ref":{"name":"T","refId":"dart.async/Stream/T"},"kind":"param","name":"next","id":"next","uri":"dart-sdk/lib/async/stream.dart","line":"611"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"611"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[]},"kind":"method","name":"firstWhere","id":"firstWhere2()","comment":"\nFinds the first element of this stream matching [test].\n\nReturns a future that is filled with the first element of this stream\nthat [test] returns true for.\n\nIf no such element is found before this stream is done, and a\n[defaultValue] function is provided, the result of calling [defaultValue]\nbecomes the value of the future.\n\nIf an error occurs, or if this stream ends without finding a match and\nwith no [defaultValue] function provided, the future will receive an\nerror.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"T","refId":"dart.async/Stream/T"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/async/stream.dart","line":"725"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"defaultValue","id":"defaultValue","children":[{"returnType":{"name":"Object","refId":"dart.core/Object"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"725"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[]},"kind":"method","name":"lastWhere","id":"lastWhere2()","comment":"\nFinds the last element in this stream matching [test].\n\nAs [firstWhere], except that the last matching element is found.\nThat means that the result cannot be provided before this stream\nis done.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"T","refId":"dart.async/Stream/T"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/async/stream.dart","line":"760"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"defaultValue","id":"defaultValue","children":[{"returnType":{"name":"Object","refId":"dart.core/Object"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"760"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"method","name":"singleWhere","id":"singleWhere1()","comment":"\nFinds the single element in this stream matching [test].\n\nLike [lastMatch], except that it is an error if more than one\nmatching element occurs in the stream.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"T","refId":"dart.async/Stream/T"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/async/stream.dart","line":"800"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"800"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"method","name":"elementAt","id":"elementAt1()","comment":"\nReturns the value of the [index]th data event of this stream.\n\nStops listening to the stream after a value has been found.\n\nIf an error event occurs before the value is found, the future completes\nwith this error.\n\nIf a done event occurs before the value is found, the future completes\nwith a [RangeError].\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"847"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isBroadcast","id":"isBroadcast","comment":"\nReports whether this stream is a broadcast stream.\n","line":"152"},{"ref":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"property","name":"length","id":"length","comment":"Counts the elements in the stream. ","line":"482"},{"ref":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"bool","refId":"dart.core/bool"}]},"kind":"property","name":"isEmpty","id":"isEmpty","comment":"Reports whether this stream contains any elements. ","line":"496"},{"ref":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"property","name":"first","id":"first","comment":"\nReturns the first element of the stream.\n\nStops listening to the stream after the first element has been received.\n\nIf an error event occurs before the first data event, the resulting future\nis completed with that error.\n\nIf this stream is empty (a done event occurs before the first data event),\nthe resulting future completes with a [StateError].\n\nExcept for the type of the error, this method is equivalent to\n[:this.elementAt(0):].\n","line":"629"},{"ref":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"property","name":"last","id":"last","comment":"\nReturns the last element of the stream.\n\nIf an error event occurs before the first data event, the resulting future\nis completed with that error.\n\nIf this stream is empty (a done event occurs before the first data event),\nthe resulting future completes with a [StateError].\n","line":"655"},{"ref":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"property","name":"single","id":"single","comment":"\nReturns the single element.\n\nIf [this] is empty or has more than one element throws a [StateError].\n","line":"682"},{"kind":"constructor","name":"","id":"0()","line":"56"},{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"constructor","name":"fromFuture","id":"fromFuture1()","comment":"\nCreates a new single-subscription stream from the future.\n\nWhen the future completes, the stream will fire one event, either\ndata or error, and then close with a done-event.\n","children":[{"ref":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"param","name":"future","id":"future"}],"line":"64"},{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"constructor","name":"fromIterable","id":"fromIterable1()","comment":"\nCreates a single-subscription stream that gets its data from [data].\n\nIf iterating [data] throws an error, the stream ends immediately with\nthat error. No done event will be sent (iteration is not complete), but no\nfurther data events will be generated either, since iteration cannot\ncontinue.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"param","name":"data","id":"data"}],"line":"85"},{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"constructor","name":"periodic","id":"periodic2()","comment":"\nCreates a stream that repeatedly emits events at [period] intervals.\n\nThe event values are computed by invoking [computation]. The argument to\nthis callback is an integer that starts with 0 and is incremented for\nevery event.\n\nIf [computation] is omitted the event values will all be `null`.\n","children":[{"ref":{"name":"Duration","refId":"dart.core/Duration"},"kind":"param","name":"period","id":"period"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"kind":"param","name":"computation","id":"computation","children":[{"returnType":{"name":"T","refId":"dart.async/Stream/T"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"computationCount","id":"computationCount","uri":"dart-sdk/lib/async/stream.dart","line":"100"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"100"}],"line":"99"},{"kind":"typeparam","name":"T","id":"T"}],"uri":"dart-sdk/lib/async/stream.dart","line":"55"}],"uri":"dart-sdk/lib/async/async.dart","line":"18"}],"kind":"library","name":"package:quiver/async.dart","id":"quiver.async","children":[{"returnType":{"name":"Future","refId":"dart.async/Future"},"kind":"method","name":"_reduceAsync","id":"_reduceAsync3()","children":[{"ref":{"name":"Iterator","refId":"dart.core/Iterator"},"kind":"param","name":"iterator","id":"iterator"},{"kind":"param","name":"currentValue","id":"currentValue"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"previous","id":"previous","uri":"package:quiver/src/async/iteration.dart","line":"47"},{"kind":"param","name":"element","id":"element","uri":"package:quiver/src/async/iteration.dart","line":"47"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"47"}],"isPrivate":true,"uri":"package:quiver/src/async/iteration.dart","line":"46"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"kind":"method","name":"reduceAsync","id":"reduceAsync3()","comment":"\nReduces a collection to a single value by iteratively combining elements\nof the collection using the provided [combine] function. Similar to\n[Iterable.reduce], except that [combine] is an async function that returns a\n[Future].\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"param","name":"iterable","id":"iterable"},{"kind":"param","name":"initialValue","id":"initialValue"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"previous","id":"previous","uri":"package:quiver/src/async/iteration.dart","line":"43"},{"kind":"param","name":"element","id":"element","uri":"package:quiver/src/async/iteration.dart","line":"43"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"uri":"package:quiver/src/async/iteration.dart","line":"43"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"kind":"method","name":"_doWhileAsync","id":"_doWhileAsync2()","children":[{"ref":{"name":"Iterator","refId":"dart.core/Iterator"},"kind":"param","name":"iterator","id":"iterator"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"action","id":"action","children":[{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"bool","refId":"dart.core/bool"}]},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"i","id":"i","uri":"package:quiver/src/async/iteration.dart","line":"29"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"isPrivate":true,"uri":"package:quiver/src/async/iteration.dart","line":"29"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"kind":"method","name":"doWhileAsync","id":"doWhileAsync2()","comment":"\nCalls [action] for each item in [iterable] in turn, waiting for the Future\nreturned by action to complete.\n\nIf the Future completes to [true], iteration continues.\n\nThe Future returned completes to [true] if the entire iterable was processed,\notherwise [false].\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"param","name":"iterable","id":"iterable"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"action","id":"action","children":[{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"bool","refId":"dart.core/bool"}]},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"i","id":"i","uri":"package:quiver/src/async/iteration.dart","line":"26"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"uri":"package:quiver/src/async/iteration.dart","line":"26"},{"returnType":{"name":"Timer","refId":"dart.async/Timer"},"kind":"method","name":"createTimerPeriodic","id":"createTimerPeriodic2()","comment":"\nCreates a new periodic [Timer] using\n`new Timer.periodic(duration, callback)`.\n","children":[{"ref":{"name":"Duration","refId":"dart.core/Duration"},"kind":"param","name":"duration","id":"duration"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"callback","id":"callback","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"Timer","id":"Timer","uri":"package:quiver/async.dart","line":"43"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"43"},{"returnType":{"name":"Timer","refId":"dart.async/Timer"},"kind":"method","name":"createTimer","id":"createTimer2()","comment":"\nCreates a new one-shot [Timer] using `new Timer(duration, callback)`.\n","children":[{"ref":{"name":"Duration","refId":"dart.core/Duration"},"kind":"param","name":"duration","id":"duration"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"callback","id":"callback","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"32"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"_Route","id":"_Route","children":[{"ref":{"name":"_Predicate","refId":"quiver.async/_Predicate"},"isFinal":true,"kind":"variable","name":"predicate","id":"predicate","line":"80"},{"ref":{"name":"StreamController","refId":"dart.async/StreamController"},"isFinal":true,"kind":"variable","name":"controller","id":"controller","line":"81"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"_Predicate","refId":"quiver.async/_Predicate"},"initializedField":{"name":"predicate","refId":"quiver.async/_Route/predicate"},"kind":"param","name":"predicate","id":"predicate"},{"ref":{"name":"StreamController","refId":"dart.async/StreamController"},"initializedField":{"name":"controller","refId":"quiver.async/_Route/controller"},"kind":"param","name":"controller","id":"controller"}],"line":"83"}],"isPrivate":true,"uri":"package:quiver/src/async/stream_router.dart","line":"79"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"typedef","name":"_Predicate","id":"_Predicate","children":[{"kind":"param","name":"event","id":"event"}],"isPrivate":true,"uri":"package:quiver/src/async/stream_router.dart","line":"77"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"StreamRouter","id":"StreamRouter","comment":"\nSplits a [Stream] of events into multiple Streams based on a set of\npredicates.\n\nUsing StreamRouter differs from [Stream.where] because events are only sent\nto one Stream. If more than one predicate matches the event, the event is\nsent to the stream created by the earlier call to [route]. Events not matched\nby a call to [route] are sent to the [defaultStream].\n\nExample:\n  import 'dart:html';\n  import 'package:quiver/async.dart';\n\n  var router = new StreamRouter(window.onClick);\n  var onRightClick = router.route((e) => e.button == 2);\n  var onAltClick = router.route((e) => e.altKey);\n  var onOtherClick router.defaultStream;\n","children":[{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"quiver.async/StreamRouter/T"}]},"kind":"method","name":"route","id":"route1()","comment":"\nEvents that match [predicate] are sent to the stream created by this\nmethod, and not sent to any other router streams.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"predicate","id":"predicate","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"T","refId":"quiver.async/StreamRouter/T"},"kind":"param","name":"event","id":"event","uri":"package:quiver/src/async/stream_router.dart","line":"55"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"55"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"kind":"method","name":"close","id":"close0()","line":"63"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_handle","id":"_handle1()","children":[{"ref":{"name":"T","refId":"quiver.async/StreamRouter/T"},"kind":"param","name":"event","id":"event"}],"isPrivate":true,"line":"69"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"quiver.async/StreamRouter/T"}]},"kind":"property","name":"defaultStream","id":"defaultStream","line":"61"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"quiver.async/StreamRouter/T"}]},"isFinal":true,"kind":"variable","name":"_incoming","id":"_incoming","isPrivate":true,"line":"37"},{"ref":{"name":"StreamSubscription","refId":"dart.async/StreamSubscription"},"kind":"variable","name":"_subscription","id":"_subscription","isPrivate":true,"line":"38"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"_Route","refId":"quiver.async/_Route"}]},"isFinal":true,"kind":"variable","name":"_routes","id":"_routes","isPrivate":true,"line":"40"},{"ref":{"name":"StreamController","refId":"dart.async/StreamController","arguments":[{"name":"T","refId":"quiver.async/StreamRouter/T"}]},"isFinal":true,"kind":"variable","name":"_defaultController","id":"_defaultController","isPrivate":true,"line":"41"},{"kind":"constructor","name":"","id":"1()","comment":"\nCreate a new StreamRouter that listens to the [incoming] stream.\n","children":[{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"quiver.async/StreamRouter/T"}]},"kind":"param","name":"incoming","id":"incoming"}],"line":"47"},{"kind":"typeparam","name":"T","id":"T"}],"uri":"package:quiver/src/async/stream_router.dart","line":"35"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"FutureGroup","id":"FutureGroup","comment":"\nA collection of [Future]s that signals when all added Futures complete. New\nFutures can be added to the group as long as it hasn't completed.\n\nFutureGroup is useful for managing a set of async tasks that may spawn new\nasync tasks as they execute.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"add","id":"add1()","comment":"\nWait for [task] to complete.\n\nIf this group has already been marked as completed, a [StateError] will be\nthrown.\n\nIf this group has a [failedTask], new tasks will be ignored, because the\nerror has already been signaled.\n","children":[{"ref":{"name":"Future","refId":"dart.async/Future"},"kind":"param","name":"task","id":"task"}],"line":"44"},{"ref":{"name":"Future","refId":"dart.async/Future"},"kind":"property","name":"failedTask","id":"failedTask","comment":"Gets the task that failed, if any. ","line":"33"},{"ref":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"quiver.async/FutureGroup/E"}]}]},"kind":"property","name":"future","id":"future","comment":"\nA Future that complets with a List of the values from all the added\ntasks, when they have all completed.\n\nIf any task fails, this Future will receive the error. Only the first\nerror will be sent to the Future.\n","line":"73"},{"isStatic":true,"kind":"variable","name":"_FINISHED","id":"_FINISHED","isPrivate":true,"line":"25"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_pending","id":"_pending","isPrivate":true,"line":"27"},{"ref":{"name":"Future","refId":"dart.async/Future"},"kind":"variable","name":"_failedTask","id":"_failedTask","isPrivate":true,"line":"28"},{"ref":{"name":"Completer","refId":"dart.async/Completer","arguments":[{"name":"List","refId":"dart.core/List"}]},"isFinal":true,"kind":"variable","name":"_completer","id":"_completer","isPrivate":true,"line":"29"},{"ref":{"name":"List","refId":"dart.core/List"},"isFinal":true,"kind":"variable","name":"results","id":"results","line":"30"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"package:quiver/src/async/future_group.dart","line":"24"},{"superclass":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"CountdownTimer","refId":"quiver.async/CountdownTimer"}]},"kind":"class","name":"CountdownTimer","id":"CountdownTimer","comment":"\nA simple countdown timer that fires events in regular increments until a\nduration has passed.\n\nCountdownTimer implements [Stream] and sends itself as the event. From the\ntimer you can get the [remaining] and [elapsed] time, or [cancel] the timer.\n","children":[{"returnType":{"name":"StreamSubscription","refId":"dart.async/StreamSubscription","arguments":[{"name":"CountdownTimer","refId":"quiver.async/CountdownTimer"}]},"kind":"method","name":"listen","id":"listen4()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"onData","id":"onData","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"CountdownTimer","refId":"quiver.async/CountdownTimer"},"kind":"param","name":"event","id":"event","uri":"package:quiver/src/async/countdown_timer.dart","line":"54"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"onError","id":"onError","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"error","id":"error","uri":"package:quiver/src/async/countdown_timer.dart","line":"55"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"55"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"onDone","id":"onDone","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"55"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"isNamed":true,"kind":"param","name":"cancelOnError","id":"cancelOnError","line":"55"}],"line":"54"},{"kind":"method","name":"cancel","id":"cancel0()","line":"64"},{"kind":"method","name":"_tick","id":"_tick1()","children":[{"ref":{"name":"Timer","refId":"dart.async/Timer"},"kind":"param","name":"timer","id":"timer"}],"isPrivate":true,"line":"70"},{"ref":{"name":"Duration","refId":"dart.core/Duration"},"kind":"property","name":"elapsed","id":"elapsed","line":"58"},{"ref":{"name":"Duration","refId":"dart.core/Duration"},"kind":"property","name":"remaining","id":"remaining","line":"60"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isRunning","id":"isRunning","line":"62"},{"isStatic":true,"kind":"variable","name":"_THRESHOLD_MS","id":"_THRESHOLD_MS","isPrivate":true,"line":"25"},{"ref":{"name":"Duration","refId":"dart.core/Duration"},"isFinal":true,"kind":"variable","name":"_duration","id":"_duration","isPrivate":true,"line":"27"},{"ref":{"name":"Duration","refId":"dart.core/Duration"},"isFinal":true,"kind":"variable","name":"_increment","id":"_increment","isPrivate":true,"line":"28"},{"ref":{"name":"Stopwatch","refId":"dart.core/Stopwatch"},"isFinal":true,"kind":"variable","name":"_stopwatch","id":"_stopwatch","isPrivate":true,"line":"29"},{"ref":{"name":"StreamController","refId":"dart.async/StreamController","arguments":[{"name":"CountdownTimer","refId":"quiver.async/CountdownTimer"}]},"isFinal":true,"kind":"variable","name":"_controller","id":"_controller","isPrivate":true,"line":"30"},{"ref":{"name":"Timer","refId":"dart.async/Timer"},"kind":"variable","name":"_timer","id":"_timer","isPrivate":true,"line":"31"},{"kind":"constructor","name":"","id":"4()","comment":"\nCreates a new [CountdownTimer] that fires events in increments of\n[increment], until the [duration] has passed.\n\n[stopwatch] and [createTimerPeriodic] are for testing purposes. If you're\nusing CountdownTimer and need to control time in a test, pass mocks or\nfakes. See [FakeTimer] and [FakeStopwatch].\n","children":[{"ref":{"name":"Duration","refId":"dart.core/Duration"},"kind":"param","name":"duration","id":"duration"},{"ref":{"name":"Duration","refId":"dart.core/Duration"},"kind":"param","name":"increment","id":"increment"},{"ref":{"name":"Stopwatch","refId":"dart.core/Stopwatch"},"isOptional":true,"isNamed":true,"kind":"param","name":"stopwatch","id":"stopwatch","line":"42"},{"ref":{"name":"CreateTimerPeriodic","refId":"quiver.async/CreateTimerPeriodic"},"isOptional":true,"isNamed":true,"kind":"param","name":"createTimerPeriodic","id":"createTimerPeriodic","line":"42"}],"line":"41"}],"uri":"package:quiver/src/async/countdown_timer.dart","line":"24"},{"returnType":{"name":"Timer","refId":"dart.async/Timer"},"kind":"typedef","name":"CreateTimerPeriodic","id":"CreateTimerPeriodic","comment":"\nThe signature of a periodic timer factory.\n","children":[{"ref":{"name":"Duration","refId":"dart.core/Duration"},"kind":"param","name":"duration","id":"duration"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"callback","id":"callback","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"Timer","id":"Timer","uri":"package:quiver/async.dart","line":"37"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"37"},{"returnType":{"name":"Timer","refId":"dart.async/Timer"},"kind":"typedef","name":"CreateTimer","id":"CreateTimer","comment":"\nThe signature of a one-shot [Timer] factory.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"callback","id":"callback","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"27"}],"uri":"package:quiver/async.dart","line":"15"}