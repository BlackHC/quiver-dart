{"name":"Quiver","tagline":"A set of utility libraries for Dart","body":"Quiver\r\n======\r\n\r\nQuiver is a set of utility libraries for Dart that makes using many Dart\r\nlibraries easier and more convenient, or adds additional functionality.\r\n\r\n## Documentation\r\n\r\nAPI Docs can be found here: http://google.github.io/quiver-dart/docs/\r\n\r\n# Main Libraries\r\n\r\n## [quiver.async][]\r\n\r\nUtilities for working with Futures, Streams and async computations.\r\n\r\n`FutureGroup` is collection of Futures that signals when all its child futures\r\nhave completed. Allows adding new Futures as long as it hasn't completed yet.\r\nUseful when async tasks can spwn new async tasks and you need to wait for all of\r\nthem to complete.\r\n\r\n`StreamRouter` splits a Stream into mulltiple streams based on a set of\r\npredicates.\r\n\r\n`CountdownTimer` is a simple countdown timer that fires events in regular\r\nincrements.\r\n\r\n`doWhileAsync` and `reduceAsync` perform async computations on the elements of\r\non Iterables, waiting for the computation to complete before processing the\r\nnext element.\r\n\r\n`CreateTimer` and `CreateTimerPeriodic` are typedefs that are useful for\r\npassing Timer factories to classes and functions, increasing the testability of\r\ncode that depends on Timer.\r\n\r\n[quiver.async]: http://google.github.io/quiver-dart/docs/quiver.async.html\r\n\r\n## [quiver.cache][]\r\n\r\n`Cache` is a semi-persistent, asynchronously accessed, mapping of keys to\r\nvalues. Caches are similar to Maps, except that the cache implementation might\r\nstore values in a remote system, so all operations are asynchronous, and caches\r\nmight have eviction policies.\r\n\r\n`MapCache` is a Cache implementation backed by a Map.\r\n\r\n[quiver.cache]: http://google.github.io/quiver-dart/docs/quiver.cache.html\r\n\r\n## [quiver.collection][]\r\n\r\n`Multimap` is an associative collection that maps keys to collections of\r\nvalues. `BiMap` is a bi-directional map and provides an inverse view, allowing\r\nlookup of key by value.\r\n\r\n[quiver.collection]: http://google.github.io/quiver-dart/docs/quiver.collection.html\r\n\r\n## [quiver.io][]\r\n\r\n`visitDirectory` is a recursive directory lister that conditionally recurses\r\ninto sub-directories based on the result of a handler function.\r\n\r\n[quiver.io]: http://google.github.io/quiver-dart/docs/quiver.io.html\r\n\r\n## [quiver.iterables][]\r\n\r\n`count`, `cycle`, `enumerate`, `merge`, `range`, and  `zip` create, transform,\r\nor combine Iterables in different ways, similar to Python's itertools.\r\n\r\n`min`, `max`, and `extent` retreive the minimum and maximum elements from an\r\niterable.\r\n\r\n[quiver.iterables]: http://google.github.io/quiver-dart/docs/quiver.iterables.html\r\n\r\n## [quiver.mirrors][]\r\n\r\n`getTypeName` returns the name of a Type instance.\r\n\r\n`implements` and `classImplements` determine if an instance or ClassMirror,\r\nrespectively, implement the interface represented by a Type instance. They\r\nimplement the behavior of `is` for mirrors, except for generics.\r\n\r\n`getMemberMirror` searches though a ClassMirror and its class hierarchy for\r\na member. This makes up for the fact that `ClassMirror.members` doesn't\r\ncontain members from interfaces or superclasses.\r\n\r\n`Method` wraps an InstanceMirror and Symbol to create a callable that invokes\r\na method on the instance. It in effect closurizes a method reflectively.\r\n\r\n[quiver.mirrors]: http://google.github.io/quiver-dart/docs/quiver.mirrors.html\r\n\r\n## [quiver.pattern][]\r\n\r\npattern.dart container utilities for work with `Pattern`s and `RegExp`s.\r\n\r\n`Glob` implements glob patterns that are commonly used with filesystem paths.\r\n\r\n`matchesAny` combines multiple Patterns into one, and allows for exclusions.\r\n\r\n`matchesFull` returns true if a Pattern matches an entire String.\r\n\r\n`escapeRegex` escapes special regex characters in a String so that it can be\r\nused as a literal match inside of a RegExp.\r\n\r\n[quiver.pattern]: http://google.github.io/quiver-dart/docs/quiver.pattern.html\r\n\r\n## [quiver.strings][]\r\n\r\n`isBlank` checks if a string is `null`, empty or made of whitespace characters.\r\n\r\n`flip` flips the order of characters in a string.\r\n\r\n`nullToEmpty` turns `null` to empty string, and returns non-empty strings\r\nunchanged.\r\n\r\n`emptyToNull` turns empty string to `null`, and returns non-empty strings\r\nunchanged.\r\n\r\n`repeat` concatenates a string to itself a given number of times, for example:\r\n\r\n`repeat('la ', 3) => 'la la la '`\r\n\r\nIt can also repeat in reverse, for example:\r\n\r\n`repeat(' og', -3) => 'go go go '`\r\n\r\n`loop` allows you to loop through characters in a string starting and ending at\r\narbitrary indices. Out of bounds indices allow you to wrap around the string,\r\nsupporting a number of use-cases, including:\r\n\r\n###### Rotating\r\n`loop('lohel', -3, 2) => 'hello'`\r\n\r\n###### Repeating\r\nLike `repeat`, but with better character-level control, e.g.:\r\n`loop('la ', 0, 8) => 'la la la'  // no tailing space`\r\n\r\n###### Tailing\r\n`loop('/path/to/some/file.txt', -3) => 'txt'`\r\n\r\n###### Reversing\r\n`loop('top', 3, 0) => 'pot'`\r\n\r\n[quiver.strings]: http://google.github.io/quiver-dart/docs/quiver.strings.html\r\n\r\n## [quiver.time][]\r\n\r\n`Clock` provides points in time relative to the current point in time, for\r\nexample: now, 2 days ago, 4 weeks from now, etc. For tesability, use Clock\r\nrather than other ways of accessing time, like `new DateTime()`, so that you\r\ncan use a fake time function in your tests to control time.\r\n\r\n`Now` is a typedef for functions that return the current time in microseconds,\r\nsince Clock deals in DateTime which only have millisecond accuracy.\r\n\r\n[quiver.time]: http://google.github.io/quiver-dart/docs/quiver.time.html\r\n\r\n# Testing Libraries\r\n\r\n## [quiver.async.testing][]\r\n\r\n`FakeTimer` is a Timer that captures its duration and callback for use in tests.\r\n\r\n[quiver.async.testing]: http://google.github.io/quiver-dart/docs/quiver.async.testing.html\r\n\r\n## [quiver.time.testing][]\r\n\r\n`FakeStopwatch` is a Stopwatch that uses a provided `now()` function to get the\r\ncurrent time.\r\n\r\n[quiver.time.testing]: http://google.github.io/quiver-dart/docs/quiver.time.testing.html\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}